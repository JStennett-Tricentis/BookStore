name: Performance Testing

on:
    schedule:
        - cron: "0 2 * * *" # Daily at 2 AM UTC
    workflow_dispatch:
        inputs:
            test-scenario:
                description: "Test scenario to run"
                required: true
                default: "comprehensive"
                type: choice
                options:
                    - smoke
                    - load
                    - stress
                    - spike
                    - comprehensive

jobs:
    performance-test:
        name: Run K6 Performance Tests
        runs-on: ubuntu-latest

        steps:
            - name: Checkout code
              uses: actions/checkout@v4

            - name: Start services with Docker Compose
              run: |
                  docker-compose -f docker-compose.perf.yml up -d
                  sleep 45  # Wait for all services to be ready

            - name: Wait for services
              run: |
                  timeout 120 bash -c 'until curl -f http://localhost:7002/health; do sleep 3; done'
                  timeout 120 bash -c 'until curl -f http://localhost:3000/api/health; do sleep 3; done'

            - name: Seed test data
              run: |
                  curl -X POST http://localhost:7002/seed-data
                  sleep 5

            - name: Install K6
              run: |
                  sudo gpg -k
                  sudo gpg --no-default-keyring --keyring /usr/share/keyrings/k6-archive-keyring.gpg --keyserver hkp://keyserver.ubuntu.com:80 --recv-keys C5AD17C747E3415A3642D57D77C6C491D6AC1D69
                  echo "deb [signed-by=/usr/share/keyrings/k6-archive-keyring.gpg] https://dl.k6.io/deb stable main" | sudo tee /etc/apt/sources.list.d/k6.list
                  sudo apt-get update
                  sudo apt-get install k6

            - name: Run K6 tests
              run: |
                  cd BookStore.Performance.Tests
                  SCENARIO="${{ inputs.test-scenario || 'comprehensive' }}"

                  case $SCENARIO in
                    smoke)
                      k6 run tests/books.js --env TEST_TYPE=smoke --env BASE_URL=http://localhost:7002 --out json=results/smoke-$(date +%Y%m%d-%H%M%S).json
                      ;;
                    load)
                      k6 run scenarios/load-test.js --env BASE_URL=http://localhost:7002 --out json=results/load-$(date +%Y%m%d-%H%M%S).json
                      ;;
                    stress)
                      k6 run scenarios/stress-test.js --env BASE_URL=http://localhost:7002 --out json=results/stress-$(date +%Y%m%d-%H%M%S).json
                      ;;
                    spike)
                      k6 run scenarios/spike-test.js --env BASE_URL=http://localhost:7002 --out json=results/spike-$(date +%Y%m%d-%H%M%S).json
                      ;;
                    comprehensive)
                      k6 run tests/books.js --env TEST_TYPE=smoke --env BASE_URL=http://localhost:7002 --out json=results/smoke-$(date +%Y%m%d-%H%M%S).json
                      k6 run scenarios/load-test.js --env BASE_URL=http://localhost:7002 --out json=results/load-$(date +%Y%m%d-%H%M%S).json
                      k6 run tests/ai-summary.js --env SCENARIO=llm_smoke --env BASE_URL=http://localhost:7002 --out json=results/ai-$(date +%Y%m%d-%H%M%S).json
                      k6 run scenarios/error-scenarios.js --env BASE_URL=http://localhost:7002 --out json=results/errors-$(date +%Y%m%d-%H%M%S).json
                      ;;
                  esac

            - name: Generate HTML reports
              if: always()
              run: |
                  cd BookStore.Performance.Tests
                  for file in results/*.json; do
                    if [ -f "$file" ]; then
                      node generate-html-report.js "$file"
                    fi
                  done

            - name: Upload performance results
              uses: actions/upload-artifact@v4
              if: always()
              with:
                  name: performance-results-${{ github.run_number }}
                  path: BookStore.Performance.Tests/results/

            - name: Export Grafana snapshots
              if: always()
              run: |
                  mkdir -p grafana-snapshots
                  # Export dashboard snapshots (requires Grafana API)
                  curl -H "Content-Type: application/json" \
                    http://localhost:3000/api/dashboards/uid/bookstore-performance \
                    > grafana-snapshots/performance-dashboard.json || true

            - name: Upload Grafana snapshots
              uses: actions/upload-artifact@v4
              if: always()
              with:
                  name: grafana-snapshots-${{ github.run_number }}
                  path: grafana-snapshots/

            - name: Show metrics summary
              if: always()
              run: |
                  echo "## Performance Test Results" >> $GITHUB_STEP_SUMMARY
                  echo "" >> $GITHUB_STEP_SUMMARY
                  echo "### Prometheus Metrics" >> $GITHUB_STEP_SUMMARY
                  echo "" >> $GITHUB_STEP_SUMMARY

                  # Query Prometheus for key metrics
                  P95_LATENCY=$(curl -s 'http://localhost:9090/api/v1/query?query=histogram_quantile(0.95,rate(http_server_request_duration_seconds_bucket[5m]))' | jq -r '.data.result[0].value[1]' || echo "N/A")
                  RPS=$(curl -s 'http://localhost:9090/api/v1/query?query=rate(http_server_requests_total[1m])' | jq -r '.data.result[0].value[1]' || echo "N/A")
                  ERROR_RATE=$(curl -s 'http://localhost:9090/api/v1/query?query=rate(http_server_requests_failed_total[1m])' | jq -r '.data.result[0].value[1]' || echo "N/A")

                  echo "- **P95 Latency**: ${P95_LATENCY}s" >> $GITHUB_STEP_SUMMARY
                  echo "- **Requests/sec**: $RPS" >> $GITHUB_STEP_SUMMARY
                  echo "- **Error Rate**: $ERROR_RATE" >> $GITHUB_STEP_SUMMARY
                  echo "" >> $GITHUB_STEP_SUMMARY
                  echo "ðŸ“Š [View Grafana Dashboard](http://localhost:3000)" >> $GITHUB_STEP_SUMMARY
                  echo "ðŸ“ˆ [View Prometheus](http://localhost:9090)" >> $GITHUB_STEP_SUMMARY

            - name: Show service logs on failure
              if: failure()
              run: |
                  docker-compose -f docker-compose.perf.yml logs --tail=100 bookstore-api
                  docker-compose -f docker-compose.perf.yml logs --tail=50 prometheus
                  docker-compose -f docker-compose.perf.yml logs --tail=50 grafana

            - name: Stop services
              if: always()
              run: docker-compose -f docker-compose.perf.yml down -v
