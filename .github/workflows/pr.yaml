name: Pull Request

on:
    pull_request:
        branches:
            - main
            - "release/**"
    push:
        branches-ignore:
            - main
            - "release/**"
    workflow_dispatch:

# Cancel in-progress runs for the same PR
concurrency:
    group: ${{ github.workflow }}-${{ github.ref }}
    cancel-in-progress: true

env:
    DOTNET_VERSION: "8.0.x"
    DOTNET_SKIP_FIRST_TIME_EXPERIENCE: true
    DOTNET_CLI_TELEMETRY_OPTOUT: true

jobs:
    build-and-test:
        name: Build and Test
        runs-on: ubuntu-latest

        services:
            mongodb:
                image: mongo:latest
                ports:
                    - 27017:27017
                env:
                    MONGO_INITDB_ROOT_USERNAME: root
                    MONGO_INITDB_ROOT_PASSWORD: example

            redis:
                image: redis:latest
                ports:
                    - 6379:6379
                options: >-
                    --health-cmd "redis-cli ping"
                    --health-interval 10s
                    --health-timeout 5s
                    --health-retries 5

        steps:
            - name: Checkout code
              uses: actions/checkout@v5
              with:
                  fetch-depth: 0 # Full history for better analysis

            - name: Setup .NET
              uses: actions/setup-dotnet@v5
              with:
                  dotnet-version: ${{ env.DOTNET_VERSION }}

            - name: Restore dependencies
              run: dotnet restore

            - name: Build solution
              run: dotnet build --no-restore --configuration Release

            - name: Run unit and integration tests
              run: dotnet test --no-build --configuration Release --verbosity normal --collect:"XPlat Code Coverage" --results-directory ./coverage
              env:
                  ConnectionStrings__MongoDB: mongodb://root:example@localhost:27017/bookstore?authSource=admin
                  ConnectionStrings__Redis: localhost:6379

            - name: Upload coverage reports
              uses: codecov/codecov-action@v5
              if: always()
              with:
                  directory: ./coverage
                  fail_ci_if_error: false
                  token: ${{ secrets.CODECOV_TOKEN }}

            - name: Upload test results
              uses: actions/upload-artifact@v4
              if: always()
              with:
                  name: test-results
                  path: ./coverage

    lint:
        name: Lint and Format Check
        runs-on: ubuntu-latest

        steps:
            - name: Checkout code
              uses: actions/checkout@v5

            - name: Setup .NET
              uses: actions/setup-dotnet@v5
              with:
                  dotnet-version: ${{ env.DOTNET_VERSION }}

            - name: Restore dependencies
              run: dotnet restore

            - name: Check code formatting
              run: dotnet format --verify-no-changes --verbosity diagnostic

    docker-build:
        name: Docker Build Test
        runs-on: ubuntu-latest

        steps:
            - name: Checkout code
              uses: actions/checkout@v5

            - name: Set up Docker Buildx
              uses: docker/setup-buildx-action@v3

            - name: Build BookStore.Service Docker image
              uses: docker/build-push-action@v6
              with:
                  context: .
                  file: ./BookStore.Service/Dockerfile
                  push: false
                  tags: bookstore-service:pr-${{ github.event.pull_request.number || github.sha }}
                  cache-from: type=gha
                  cache-to: type=gha,mode=max

            - name: Build BookStore.Performance.Service Docker image
              uses: docker/build-push-action@v6
              with:
                  context: .
                  file: ./BookStore.Performance.Service/Dockerfile
                  push: false
                  tags: bookstore-performance-service:pr-${{ github.event.pull_request.number || github.sha }}
                  cache-from: type=gha
                  cache-to: type=gha,mode=max

    performance-smoke-test:
        name: Performance Smoke Test
        runs-on: ubuntu-latest
        needs: [build-and-test]

        steps:
            - name: Checkout code
              uses: actions/checkout@v5

            - name: Setup .NET
              uses: actions/setup-dotnet@v5
              with:
                  dotnet-version: ${{ env.DOTNET_VERSION }}

            - name: Start services with Docker Compose
              run: |
                  docker-compose -f docker-compose.perf.yml up -d
                  sleep 30  # Wait for services to be ready

            - name: Wait for API health
              run: |
                  timeout 60 bash -c 'until curl -f http://localhost:7002/health; do sleep 2; done'

            - name: Install K6
              run: |
                  sudo gpg -k
                  sudo gpg --no-default-keyring --keyring /usr/share/keyrings/k6-archive-keyring.gpg --keyserver hkp://keyserver.ubuntu.com:80 --recv-keys C5AD17C747E3415A3642D57D77C6C491D6AC1D69
                  echo "deb [signed-by=/usr/share/keyrings/k6-archive-keyring.gpg] https://dl.k6.io/deb stable main" | sudo tee /etc/apt/sources.list.d/k6.list
                  sudo apt-get update
                  sudo apt-get install k6

            - name: Run K6 smoke test
              run: |
                  cd BookStore.Performance.Tests
                  k6 run tests/books.js --env TEST_TYPE=smoke --env BASE_URL=http://localhost:7002 --quiet

            - name: Show service logs on failure
              if: failure()
              run: |
                  docker-compose -f docker-compose.perf.yml logs bookstore-api
                  docker-compose -f docker-compose.perf.yml logs mongodb
                  docker-compose -f docker-compose.perf.yml logs redis

            - name: Stop services
              if: always()
              run: docker-compose -f docker-compose.perf.yml down -v

    security-scan:
        name: Security Scan
        runs-on: ubuntu-latest
        permissions:
            security-events: write
            actions: read
            contents: read

        steps:
            - name: Checkout code
              uses: actions/checkout@v5

            - name: Run Trivy vulnerability scanner
              uses: aquasecurity/trivy-action@master
              with:
                  scan-type: "fs"
                  scan-ref: "."
                  format: "sarif"
                  output: "trivy-results.sarif"

            - name: Upload Trivy results to GitHub Security
              uses: github/codeql-action/upload-sarif@v3
              if: always()
              with:
                  sarif_file: "trivy-results.sarif"

    pr-summary:
        name: PR Summary
        runs-on: ubuntu-latest
        needs: [build-and-test, lint, docker-build, performance-smoke-test, security-scan]
        if: always()

        steps:
            - name: Check job results
              run: |
                  echo "Build and Test: ${{ needs.build-and-test.result }}"
                  echo "Lint: ${{ needs.lint.result }}"
                  echo "Docker Build: ${{ needs.docker-build.result }}"
                  echo "Performance Smoke Test: ${{ needs.performance-smoke-test.result }}"
                  echo "Security Scan: ${{ needs.security-scan.result }}"

                  if [[ "${{ needs.build-and-test.result }}" != "success" || \
                        "${{ needs.lint.result }}" != "success" || \
                        "${{ needs.docker-build.result }}" != "success" ]]; then
                    echo "❌ Required checks failed"
                    exit 1
                  fi

                  echo "✅ All required checks passed"
