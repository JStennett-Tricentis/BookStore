name: Deploy

on:
    push:
        branches:
            - main # Development environment
            - "release/**" # Staging environment
    release:
        types: [published] # Production environment
    workflow_dispatch:
        inputs:
            environment:
                description: "Deployment environment"
                required: true
                default: "development"
                type: choice
                options:
                    - development
                    - staging
                    - production

env:
    DOTNET_VERSION: "8.0.x"
    REGISTRY: ghcr.io
    IMAGE_NAME_API: ${{ github.repository }}/bookstore-api
    IMAGE_NAME_PERF: ${{ github.repository }}/bookstore-performance-service

jobs:
    determine-environment:
        name: Determine Environment
        runs-on: ubuntu-latest
        outputs:
            environment: ${{ steps.set-env.outputs.environment }}
            tag: ${{ steps.set-env.outputs.tag }}

        steps:
            - name: Set environment and tag
              id: set-env
              run: |
                  if [[ "${{ github.event_name }}" == "workflow_dispatch" ]]; then
                    echo "environment=${{ inputs.environment }}" >> $GITHUB_OUTPUT
                    echo "tag=${{ inputs.environment }}-${{ github.sha }}" >> $GITHUB_OUTPUT
                  elif [[ "${{ github.event_name }}" == "release" ]]; then
                    echo "environment=production" >> $GITHUB_OUTPUT
                    echo "tag=${{ github.event.release.tag_name }}" >> $GITHUB_OUTPUT
                  elif [[ "${{ github.ref }}" == "refs/heads/main" ]]; then
                    echo "environment=development" >> $GITHUB_OUTPUT
                    echo "tag=dev-${{ github.sha }}" >> $GITHUB_OUTPUT
                  elif [[ "${{ github.ref }}" =~ ^refs/heads/release/ ]]; then
                    echo "environment=staging" >> $GITHUB_OUTPUT
                    echo "tag=staging-${{ github.sha }}" >> $GITHUB_OUTPUT
                  else
                    echo "environment=development" >> $GITHUB_OUTPUT
                    echo "tag=dev-${{ github.sha }}" >> $GITHUB_OUTPUT
                  fi

    build-and-push:
        name: Build and Push Docker Images
        runs-on: ubuntu-latest
        needs: [determine-environment]
        permissions:
            contents: read
            packages: write

        steps:
            - name: Checkout code
              uses: actions/checkout@v4

            - name: Set up Docker Buildx
              uses: docker/setup-buildx-action@v3

            - name: Log in to GitHub Container Registry
              uses: docker/login-action@v3
              with:
                  registry: ${{ env.REGISTRY }}
                  username: ${{ github.actor }}
                  password: ${{ secrets.GITHUB_TOKEN }}

            - name: Extract metadata for API
              id: meta-api
              uses: docker/metadata-action@v5
              with:
                  images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME_API }}
                  tags: |
                      type=raw,value=${{ needs.determine-environment.outputs.tag }}
                      type=raw,value=${{ needs.determine-environment.outputs.environment }}-latest
                      type=sha,prefix={{branch}}-

            - name: Build and push API image
              uses: docker/build-push-action@v5
              with:
                  context: .
                  file: ./BookStore.Service/Dockerfile
                  push: true
                  tags: ${{ steps.meta-api.outputs.tags }}
                  labels: ${{ steps.meta-api.outputs.labels }}
                  cache-from: type=registry,ref=${{ env.REGISTRY }}/${{ env.IMAGE_NAME_API }}:buildcache
                  cache-to: type=registry,ref=${{ env.REGISTRY }}/${{ env.IMAGE_NAME_API }}:buildcache,mode=max
                  build-args: |
                      BUILD_CONFIGURATION=Release
                      VERSION=${{ needs.determine-environment.outputs.tag }}

            - name: Extract metadata for Performance Service
              id: meta-perf
              uses: docker/metadata-action@v5
              with:
                  images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME_PERF }}
                  tags: |
                      type=raw,value=${{ needs.determine-environment.outputs.tag }}
                      type=raw,value=${{ needs.determine-environment.outputs.environment }}-latest
                      type=sha,prefix={{branch}}-

            - name: Build and push Performance Service image
              uses: docker/build-push-action@v5
              with:
                  context: .
                  file: ./BookStore.Performance.Service/Dockerfile
                  push: true
                  tags: ${{ steps.meta-perf.outputs.tags }}
                  labels: ${{ steps.meta-perf.outputs.labels }}
                  cache-from: type=registry,ref=${{ env.REGISTRY }}/${{ env.IMAGE_NAME_PERF }}:buildcache
                  cache-to: type=registry,ref=${{ env.REGISTRY }}/${{ env.IMAGE_NAME_PERF }}:buildcache,mode=max
                  build-args: |
                      BUILD_CONFIGURATION=Release
                      VERSION=${{ needs.determine-environment.outputs.tag }}

    deploy-development:
        name: Deploy to Development
        runs-on: ubuntu-latest
        needs: [determine-environment, build-and-push]
        if: needs.determine-environment.outputs.environment == 'development'
        environment:
            name: development
            url: https://dev-bookstore-api.example.com

        steps:
            - name: Deploy to development
              run: |
                  echo "ðŸš€ Deploying to development environment"
                  echo "Tag: ${{ needs.determine-environment.outputs.tag }}"
                  # Add your deployment commands here (kubectl, helm, terraform, etc.)
                  # Example:
                  # kubectl set image deployment/bookstore-api bookstore-api=${{ env.REGISTRY }}/${{ env.IMAGE_NAME_API }}:${{ needs.determine-environment.outputs.tag }}

            - name: Run smoke tests
              run: |
                  echo "ðŸ§ª Running smoke tests against development"
                  # Add smoke test commands here

    deploy-staging:
        name: Deploy to Staging
        runs-on: ubuntu-latest
        needs: [determine-environment, build-and-push]
        if: needs.determine-environment.outputs.environment == 'staging'
        environment:
            name: staging
            url: https://staging-bookstore-api.example.com

        steps:
            - name: Deploy to staging
              run: |
                  echo "ðŸš€ Deploying to staging environment"
                  echo "Tag: ${{ needs.determine-environment.outputs.tag }}"
                  # Add your deployment commands here

            - name: Run integration tests
              run: |
                  echo "ðŸ§ª Running integration tests against staging"
                  # Add integration test commands here

    deploy-production:
        name: Deploy to Production
        runs-on: ubuntu-latest
        needs: [determine-environment, build-and-push]
        if: needs.determine-environment.outputs.environment == 'production'
        environment:
            name: production
            url: https://bookstore-api.example.com

        steps:
            - name: Deploy to production
              run: |
                  echo "ðŸš€ Deploying to production environment"
                  echo "Tag: ${{ needs.determine-environment.outputs.tag }}"
                  # Add your deployment commands here

            - name: Run smoke tests
              run: |
                  echo "ðŸ§ª Running smoke tests against production"
                  # Add smoke test commands here

            - name: Notify deployment
              if: always()
              run: |
                  echo "ðŸ“¢ Production deployment completed"
                  # Add notification logic (Slack, Teams, etc.)

    deployment-summary:
        name: Deployment Summary
        runs-on: ubuntu-latest
        needs:
            [
                determine-environment,
                build-and-push,
                deploy-development,
                deploy-staging,
                deploy-production,
            ]
        if: always()

        steps:
            - name: Summary
              run: |
                  echo "## Deployment Summary" >> $GITHUB_STEP_SUMMARY
                  echo "" >> $GITHUB_STEP_SUMMARY
                  echo "- **Environment**: ${{ needs.determine-environment.outputs.environment }}" >> $GITHUB_STEP_SUMMARY
                  echo "- **Tag**: ${{ needs.determine-environment.outputs.tag }}" >> $GITHUB_STEP_SUMMARY
                  echo "- **Build**: ${{ needs.build-and-push.result }}" >> $GITHUB_STEP_SUMMARY
                  echo "- **Deploy Development**: ${{ needs.deploy-development.result }}" >> $GITHUB_STEP_SUMMARY
                  echo "- **Deploy Staging**: ${{ needs.deploy-staging.result }}" >> $GITHUB_STEP_SUMMARY
                  echo "- **Deploy Production**: ${{ needs.deploy-production.result }}" >> $GITHUB_STEP_SUMMARY
