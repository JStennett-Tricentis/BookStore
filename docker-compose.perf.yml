services:
    # Core Infrastructure
    mongodb:
        image: mongo:7.0
        container_name: bookstore-mongodb-perf
        ports:
            - "27017:27017"
        volumes:
            - mongodb_data:/data/db
        environment:
            MONGO_INITDB_DATABASE: bookstore
        healthcheck:
            test: ["CMD", "mongosh", "--eval", "db.adminCommand('ping')"]
            interval: 10s
            timeout: 5s
            retries: 5

    redis:
        image: redis:7.2-alpine
        container_name: bookstore-redis-perf
        ports:
            - "6379:6379"
        volumes:
            - redis_data:/data
        command: redis-server --appendonly yes
        healthcheck:
            test: ["CMD", "redis-cli", "ping"]
            interval: 10s
            timeout: 3s
            retries: 3

    # Ollama - Free local LLM for unlimited performance testing
    ollama:
        image: ollama/ollama:latest
        container_name: bookstore-ollama-perf
        ports:
            - "11434:11434"
        volumes:
            - ollama_data:/root/.ollama
        environment:
            - OLLAMA_ORIGINS=*
        healthcheck:
            test: ["CMD", "curl", "-f", "http://localhost:11434/api/version"]
            interval: 30s
            timeout: 10s
            retries: 3
            start_period: 60s

    # BookStore Service
    bookstore-service:
        build:
            context: .
            dockerfile: BookStore.Service/Dockerfile
        container_name: bookstore-service-perf
        ports:
            - "7001:7001"
            - "7002:7002"
        environment:
            - ASPNETCORE_ENVIRONMENT=Development
            - ASPNETCORE_URLS=https://+:7001;http://+:7002
            - Database__ConnectionString=mongodb://mongodb:27017
            - Redis__ConnectionString=redis:6379
            - LLM__Provider=Ollama
            - LLM__Providers__Ollama__Url=http://ollama:11434
            - LLM__Providers__Ollama__Model=llama3.2
            - Telemetry__Exporters__Console__Enabled=true
            - Telemetry__Exporters__Otlp__Enabled=false
        depends_on:
            mongodb:
                condition: service_healthy
            redis:
                condition: service_healthy
            ollama:
                condition: service_healthy
        healthcheck:
            test: ["CMD", "curl", "-f", "http://localhost:7002/health"]
            interval: 30s
            timeout: 10s
            retries: 3
            start_period: 40s

    # Performance Service
    bookstore-performance:
        build:
            context: .
            dockerfile: BookStore.Performance.Service/Dockerfile
        container_name: bookstore-performance-perf
        ports:
            - "7003:7003"
            - "7004:7004"
        environment:
            - ASPNETCORE_ENVIRONMENT=Development
            - ASPNETCORE_URLS=https://+:7003;http://+:7004
            - Redis__ConnectionString=redis:6379
            - K6__ScriptsPath=/k6-scripts
            - Telemetry__Exporters__Console__Enabled=true
        volumes:
            - ./BookStore.Performance.Tests:/k6-scripts:ro
            - ./k6-results:/tmp/k6-results
            - /var/run/docker.sock:/var/run/docker.sock
        depends_on:
            redis:
                condition: service_healthy
            bookstore-service:
                condition: service_healthy
        healthcheck:
            test: ["CMD", "curl", "-f", "http://localhost:7004/health"]
            interval: 30s
            timeout: 10s
            retries: 3
            start_period: 30s

    # K6 Load Generator (for standalone testing)
    k6:
        build:
            context: ./docker/k6
        container_name: bookstore-k6-perf
        profiles:
            - manual-testing
        volumes:
            - ./BookStore.Performance.Tests:/scripts:ro
            - ./k6-results:/shared
        environment:
            - SCENARIO=${SCENARIO:-load}
            - ENVIRONMENT=docker
            - TARGET_URL=http://bookstore-service:7002
        depends_on:
            bookstore-service:
                condition: service_healthy
        command: >
            run
            --env SCENARIO=${SCENARIO:-load}
            --env TARGET_URL=http://bookstore-service:7002
            /scripts/tests/books.js

    # Observability Stack (Optional)
    jaeger:
        image: jaegertracing/all-in-one:1.51
        container_name: bookstore-jaeger-perf
        profiles:
            - observability
        ports:
            - "16686:16686" # Jaeger UI
            - "14268:14268" # Jaeger collector
        environment:
            - COLLECTOR_OTLP_ENABLED=true

    prometheus:
        image: prom/prometheus:v2.48.0
        container_name: bookstore-prometheus-perf
        profiles:
            - observability
        ports:
            - "9090:9090"
        volumes:
            - ./monitoring/prometheus:/etc/prometheus:ro
            - prometheus_data:/prometheus
        command:
            - "--config.file=/etc/prometheus/prometheus.yml"
            - "--storage.tsdb.path=/prometheus"
            - "--web.console.libraries=/usr/share/prometheus/console_libraries"
            - "--web.console.templates=/usr/share/prometheus/consoles"
            - "--web.enable-lifecycle"

    grafana:
        image: grafana/grafana:10.2.0
        container_name: bookstore-grafana-perf
        profiles:
            - observability
        ports:
            - "3333:3000"
        volumes:
            - ./monitoring/grafana:/etc/grafana/provisioning:ro
            - grafana_data:/var/lib/grafana
        environment:
            - GF_SECURITY_ADMIN_PASSWORD=admin123
            - GF_USERS_ALLOW_SIGN_UP=false

volumes:
    mongodb_data:
    redis_data:
    ollama_data:
    prometheus_data:
    grafana_data:

networks:
    default:
        name: bookstore-perf
        driver: bridge
