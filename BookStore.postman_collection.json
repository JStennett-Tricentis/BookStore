{
  "info": {
    "name": "BookStore API",
    "description": "Enterprise-grade BookStore API for performance testing. Includes complete CRUD operations for Books and Authors with pagination, search, and filtering capabilities.",
    "_postman_id": "bookstore-api-collection",
    "schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
    "version": "1.0.0"
  },
  "variable": [
    {
      "key": "baseUrl",
      "value": "http://localhost:7002",
      "type": "string"
    },
    {
      "key": "apiVersion",
      "value": "1",
      "type": "string"
    },
    {
      "key": "bookId",
      "value": "",
      "type": "string"
    },
    {
      "key": "authorId",
      "value": "",
      "type": "string"
    }
  ],
  "item": [
    {
      "name": "Books",
      "item": [
        {
          "name": "Get All Books",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"Status code is 200\", function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test(\"Response is an array\", function () {",
                  "    var jsonData = pm.response.json();",
                  "    pm.expect(jsonData).to.be.an('array');",
                  "});",
                  "",
                  "pm.test(\"Response time is less than 500ms\", function () {",
                  "    pm.expect(pm.response.responseTime).to.be.below(500);",
                  "});",
                  "",
                  "// Store first book ID for later use",
                  "if (pm.response.json().length > 0) {",
                  "    pm.collectionVariables.set(\"bookId\", pm.response.json()[0].id);",
                  "}"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{baseUrl}}/api/v{{apiVersion}}/Books?page=1&pageSize=10",
              "host": [
                "{{baseUrl}}"
              ],
              "path": [
                "api",
                "v{{apiVersion}}",
                "Books"
              ],
              "query": [
                {
                  "key": "genre",
                  "value": "Fiction",
                  "disabled": true
                },
                {
                  "key": "author",
                  "value": "Stephen King",
                  "disabled": true
                },
                {
                  "key": "page",
                  "value": "1"
                },
                {
                  "key": "pageSize",
                  "value": "10"
                }
              ]
            },
            "description": "Retrieve a paginated list of books with optional filtering by genre and author"
          },
          "response": []
        },
        {
          "name": "Get Book by ID",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"Status code is 200\", function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test(\"Book has required fields\", function () {",
                  "    var jsonData = pm.response.json();",
                  "    pm.expect(jsonData).to.have.property('id');",
                  "    pm.expect(jsonData).to.have.property('title');",
                  "    pm.expect(jsonData).to.have.property('author');",
                  "    pm.expect(jsonData).to.have.property('isbn');",
                  "    pm.expect(jsonData).to.have.property('price');",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{baseUrl}}/api/v{{apiVersion}}/Books/{{bookId}}",
              "host": [
                "{{baseUrl}}"
              ],
              "path": [
                "api",
                "v{{apiVersion}}",
                "Books",
                "{{bookId}}"
              ]
            },
            "description": "Retrieve a specific book by its ID"
          },
          "response": []
        },
        {
          "name": "Create Book",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"Status code is 201\", function () {",
                  "    pm.response.to.have.status(201);",
                  "});",
                  "",
                  "pm.test(\"Book created successfully\", function () {",
                  "    var jsonData = pm.response.json();",
                  "    pm.expect(jsonData).to.have.property('id');",
                  "    pm.collectionVariables.set(\"bookId\", jsonData.id);",
                  "});",
                  "",
                  "pm.test(\"Location header is present\", function () {",
                  "    pm.response.to.have.header(\"Location\");",
                  "});"
                ],
                "type": "text/javascript"
              }
            },
            {
              "listen": "prerequest",
              "script": {
                "exec": [
                  "// Generate random ISBN",
                  "const randomISBN = `978-${Math.floor(Math.random() * 10)}-${Math.floor(Math.random() * 100000)}-${Math.floor(Math.random() * 100)}-${Math.floor(Math.random() * 10)}`;",
                  "pm.variables.set(\"randomISBN\", randomISBN);",
                  "",
                  "// Generate random price",
                  "const randomPrice = (Math.random() * 50 + 10).toFixed(2);",
                  "pm.variables.set(\"randomPrice\", randomPrice);",
                  "",
                  "// Generate random stock",
                  "const randomStock = Math.floor(Math.random() * 100) + 1;",
                  "pm.variables.set(\"randomStock\", randomStock);"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"title\": \"The Great Gatsby\",\n  \"author\": \"F. Scott Fitzgerald\",\n  \"isbn\": \"{{randomISBN}}\",\n  \"price\": {{randomPrice}},\n  \"publishedDate\": \"1925-04-10T00:00:00Z\",\n  \"genre\": \"Fiction\",\n  \"description\": \"A classic American novel set in the Jazz Age, exploring themes of wealth, love, and the American Dream.\",\n  \"stockQuantity\": {{randomStock}}\n}"
            },
            "url": {
              "raw": "{{baseUrl}}/api/v{{apiVersion}}/Books",
              "host": [
                "{{baseUrl}}"
              ],
              "path": [
                "api",
                "v{{apiVersion}}",
                "Books"
              ]
            },
            "description": "Create a new book in the catalog"
          },
          "response": []
        },
        {
          "name": "Update Book",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"Status code is 200\", function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test(\"Book updated successfully\", function () {",
                  "    var jsonData = pm.response.json();",
                  "    pm.expect(jsonData.title).to.eql(\"Updated Book Title\");",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "PUT",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"title\": \"Updated Book Title\",\n  \"author\": \"Updated Author\",\n  \"isbn\": \"978-0-123456-78-9\",\n  \"price\": 34.99,\n  \"publishedDate\": \"2024-01-01T00:00:00Z\",\n  \"genre\": \"Technology\",\n  \"description\": \"An updated description for the book.\",\n  \"stockQuantity\": 150\n}"
            },
            "url": {
              "raw": "{{baseUrl}}/api/v{{apiVersion}}/Books/{{bookId}}",
              "host": [
                "{{baseUrl}}"
              ],
              "path": [
                "api",
                "v{{apiVersion}}",
                "Books",
                "{{bookId}}"
              ]
            },
            "description": "Update an existing book completely"
          },
          "response": []
        },
        {
          "name": "Patch Book",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"Status code is 200\", function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test(\"Price updated successfully\", function () {",
                  "    var jsonData = pm.response.json();",
                  "    pm.expect(jsonData.price).to.eql(19.99);",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "PATCH",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"price\": 19.99,\n  \"stockQuantity\": 75\n}"
            },
            "url": {
              "raw": "{{baseUrl}}/api/v{{apiVersion}}/Books/{{bookId}}",
              "host": [
                "{{baseUrl}}"
              ],
              "path": [
                "api",
                "v{{apiVersion}}",
                "Books",
                "{{bookId}}"
              ]
            },
            "description": "Partially update a book (only specified fields)"
          },
          "response": []
        },
        {
          "name": "Search Books",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"Status code is 200\", function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test(\"Search returns array\", function () {",
                  "    var jsonData = pm.response.json();",
                  "    pm.expect(jsonData).to.be.an('array');",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{baseUrl}}/api/v{{apiVersion}}/Books/search?query=gatsby",
              "host": [
                "{{baseUrl}}"
              ],
              "path": [
                "api",
                "v{{apiVersion}}",
                "Books",
                "search"
              ],
              "query": [
                {
                  "key": "query",
                  "value": "gatsby"
                }
              ]
            },
            "description": "Search for books by title, author, or description"
          },
          "response": []
        },
        {
          "name": "Generate AI Summary",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"Status code is 200\", function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test(\"Summary generated successfully\", function () {",
                  "    var jsonData = pm.response.json();",
                  "    pm.expect(jsonData).to.have.property('aiGeneratedSummary');",
                  "    pm.expect(jsonData.aiGeneratedSummary).to.not.be.empty;",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [],
            "url": {
              "raw": "{{baseUrl}}/api/v{{apiVersion}}/Books/{{bookId}}/generate-summary",
              "host": [
                "{{baseUrl}}"
              ],
              "path": [
                "api",
                "v{{apiVersion}}",
                "Books",
                "{{bookId}}",
                "generate-summary"
              ]
            },
            "description": "Generate an AI-powered book summary using configured LLM provider (Ollama/Claude/OpenAI/Bedrock)"
          },
          "response": []
        },
        {
          "name": "Delete Book",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"Status code is 204\", function () {",
                  "    pm.response.to.have.status(204);",
                  "});",
                  "",
                  "pm.test(\"No content returned\", function () {",
                  "    pm.expect(pm.response.text()).to.be.empty;",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "DELETE",
            "header": [],
            "url": {
              "raw": "{{baseUrl}}/api/v{{apiVersion}}/Books/{{bookId}}",
              "host": [
                "{{baseUrl}}"
              ],
              "path": [
                "api",
                "v{{apiVersion}}",
                "Books",
                "{{bookId}}"
              ]
            },
            "description": "Delete a book from the catalog"
          },
          "response": []
        }
      ],
      "description": "Book management endpoints for CRUD operations"
    },
    {
      "name": "Authors",
      "item": [
        {
          "name": "Get All Authors",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"Status code is 200\", function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test(\"Response is an array\", function () {",
                  "    var jsonData = pm.response.json();",
                  "    pm.expect(jsonData).to.be.an('array');",
                  "});",
                  "",
                  "// Store first author ID for later use",
                  "if (pm.response.json().length > 0) {",
                  "    pm.collectionVariables.set(\"authorId\", pm.response.json()[0].id);",
                  "}"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{baseUrl}}/api/v{{apiVersion}}/Authors?page=1&pageSize=10",
              "host": [
                "{{baseUrl}}"
              ],
              "path": [
                "api",
                "v{{apiVersion}}",
                "Authors"
              ],
              "query": [
                {
                  "key": "page",
                  "value": "1"
                },
                {
                  "key": "pageSize",
                  "value": "10"
                }
              ]
            },
            "description": "Retrieve a paginated list of authors"
          },
          "response": []
        },
        {
          "name": "Get Author by ID",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"Status code is 200\", function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test(\"Author has required fields\", function () {",
                  "    var jsonData = pm.response.json();",
                  "    pm.expect(jsonData).to.have.property('id');",
                  "    pm.expect(jsonData).to.have.property('name');",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{baseUrl}}/api/v{{apiVersion}}/Authors/{{authorId}}",
              "host": [
                "{{baseUrl}}"
              ],
              "path": [
                "api",
                "v{{apiVersion}}",
                "Authors",
                "{{authorId}}"
              ]
            },
            "description": "Retrieve a specific author by ID"
          },
          "response": []
        },
        {
          "name": "Create Author",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"Status code is 201\", function () {",
                  "    pm.response.to.have.status(201);",
                  "});",
                  "",
                  "pm.test(\"Author created successfully\", function () {",
                  "    var jsonData = pm.response.json();",
                  "    pm.expect(jsonData).to.have.property('id');",
                  "    pm.collectionVariables.set(\"authorId\", jsonData.id);",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"name\": \"Stephen King\",\n  \"biography\": \"Stephen Edwin King is an American author of horror, supernatural fiction, suspense, crime, science-fiction, and fantasy novels.\",\n  \"birthDate\": \"1947-09-21T00:00:00Z\",\n  \"nationality\": \"American\"\n}"
            },
            "url": {
              "raw": "{{baseUrl}}/api/v{{apiVersion}}/Authors",
              "host": [
                "{{baseUrl}}"
              ],
              "path": [
                "api",
                "v{{apiVersion}}",
                "Authors"
              ]
            },
            "description": "Create a new author"
          },
          "response": []
        },
        {
          "name": "Update Author",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"Status code is 200\", function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test(\"Author updated successfully\", function () {",
                  "    var jsonData = pm.response.json();",
                  "    pm.expect(jsonData.name).to.include(\"Updated\");",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "PUT",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"name\": \"Stephen King (Updated)\",\n  \"biography\": \"Updated biography - Stephen Edwin King is an American author known for his prolific writing career.\",\n  \"birthDate\": \"1947-09-21T00:00:00Z\",\n  \"nationality\": \"American\"\n}"
            },
            "url": {
              "raw": "{{baseUrl}}/api/v{{apiVersion}}/Authors/{{authorId}}",
              "host": [
                "{{baseUrl}}"
              ],
              "path": [
                "api",
                "v{{apiVersion}}",
                "Authors",
                "{{authorId}}"
              ]
            },
            "description": "Update an existing author"
          },
          "response": []
        },
        {
          "name": "Delete Author",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"Status code is 204\", function () {",
                  "    pm.response.to.have.status(204);",
                  "});",
                  "",
                  "pm.test(\"No content returned\", function () {",
                  "    pm.expect(pm.response.text()).to.be.empty;",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "DELETE",
            "header": [],
            "url": {
              "raw": "{{baseUrl}}/api/v{{apiVersion}}/Authors/{{authorId}}",
              "host": [
                "{{baseUrl}}"
              ],
              "path": [
                "api",
                "v{{apiVersion}}",
                "Authors",
                "{{authorId}}"
              ]
            },
            "description": "Delete an author"
          },
          "response": []
        }
      ],
      "description": "Author management endpoints"
    },
    {
      "name": "Health & Status",
      "item": [
        {
          "name": "Health Check",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"Service is healthy\", function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test(\"Response time is acceptable\", function () {",
                  "    pm.expect(pm.response.responseTime).to.be.below(100);",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{baseUrl}}/health",
              "host": [
                "{{baseUrl}}"
              ],
              "path": [
                "health"
              ]
            },
            "description": "Check if the service is healthy and responding"
          },
          "response": []
        },
        {
          "name": "Seed Sample Data",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"Data seeded successfully\", function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test(\"Success message returned\", function () {",
                  "    var jsonData = pm.response.json();",
                  "    pm.expect(jsonData).to.have.property('message');",
                  "    pm.expect(jsonData.message).to.include('seeded');",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [],
            "url": {
              "raw": "{{baseUrl}}/seed-data",
              "host": [
                "{{baseUrl}}"
              ],
              "path": [
                "seed-data"
              ]
            },
            "description": "Seed database with sample books and authors for testing"
          },
          "response": []
        },
        {
          "name": "Prometheus Metrics",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"Metrics endpoint accessible\", function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test(\"Metrics format is correct\", function () {",
                  "    pm.expect(pm.response.text()).to.include('# TYPE');",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{baseUrl}}/metrics",
              "host": [
                "{{baseUrl}}"
              ],
              "path": [
                "metrics"
              ]
            },
            "description": "Prometheus metrics scraping endpoint for OpenTelemetry"
          },
          "response": []
        }
      ],
      "description": "Service health and monitoring endpoints"
    },
    {
      "name": "LLM Testing",
      "item": [
        {
          "name": "Get LLM Providers",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"Status code is 200\", function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test(\"Available providers returned\", function () {",
                  "    var jsonData = pm.response.json();",
                  "    pm.expect(jsonData).to.have.property('availableProviders');",
                  "    pm.expect(jsonData).to.have.property('defaultProvider');",
                  "    pm.expect(jsonData.availableProviders).to.be.an('array');",
                  "    pm.expect(jsonData.availableProviders.length).to.be.at.least(1);",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{baseUrl}}/api/v{{apiVersion}}/Books/llm-providers",
              "host": [
                "{{baseUrl}}"
              ],
              "path": [
                "api",
                "v{{apiVersion}}",
                "Books",
                "llm-providers"
              ]
            },
            "description": "Get list of available LLM providers and the default provider"
          },
          "response": []
        },
        {
          "name": "Test AI Summary - Default Provider",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"Status code is 200\", function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test(\"AI summary generated\", function () {",
                  "    var jsonData = pm.response.json();",
                  "    pm.expect(jsonData).to.have.property('aiGeneratedSummary');",
                  "    pm.expect(jsonData).to.have.property('provider');",
                  "    pm.expect(jsonData.aiGeneratedSummary).to.not.be.empty;",
                  "});",
                  "",
                  "pm.test(\"Response time acceptable for LLM call\", function () {",
                  "    pm.expect(pm.response.responseTime).to.be.below(15000);",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [],
            "url": {
              "raw": "{{baseUrl}}/api/v{{apiVersion}}/Books/{{bookId}}/generate-summary",
              "host": [
                "{{baseUrl}}"
              ],
              "path": [
                "api",
                "v{{apiVersion}}",
                "Books",
                "{{bookId}}",
                "generate-summary"
              ]
            },
            "description": "Test LLM summary generation with default provider (configured in appsettings.json)"
          },
          "response": []
        },
        {
          "name": "Test AI Summary - Ollama",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"Status code is 200\", function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test(\"AI summary generated with Ollama\", function () {",
                  "    var jsonData = pm.response.json();",
                  "    pm.expect(jsonData).to.have.property('aiGeneratedSummary');",
                  "    pm.expect(jsonData).to.have.property('provider');",
                  "    pm.expect(jsonData.provider).to.eql('ollama');",
                  "    pm.expect(jsonData.aiGeneratedSummary).to.not.be.empty;",
                  "});",
                  "",
                  "pm.test(\"Response time acceptable for Ollama\", function () {",
                  "    pm.expect(pm.response.responseTime).to.be.below(15000);",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [],
            "url": {
              "raw": "{{baseUrl}}/api/v{{apiVersion}}/Books/{{bookId}}/generate-summary?provider=ollama",
              "host": [
                "{{baseUrl}}"
              ],
              "path": [
                "api",
                "v{{apiVersion}}",
                "Books",
                "{{bookId}}",
                "generate-summary"
              ],
              "query": [
                {
                  "key": "provider",
                  "value": "ollama"
                }
              ]
            },
            "description": "Test LLM summary generation with Ollama (free local LLM)"
          },
          "response": []
        },
        {
          "name": "Test AI Summary - Claude",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"Status code is 200 or 503\", function () {",
                  "    pm.expect([200, 503]).to.include(pm.response.code);",
                  "});",
                  "",
                  "if (pm.response.code === 200) {",
                  "    pm.test(\"AI summary generated with Claude\", function () {",
                  "        var jsonData = pm.response.json();",
                  "        pm.expect(jsonData).to.have.property('aiGeneratedSummary');",
                  "        pm.expect(jsonData).to.have.property('provider');",
                  "        pm.expect(jsonData.provider).to.eql('claude');",
                  "        pm.expect(jsonData.aiGeneratedSummary).to.not.be.empty;",
                  "    });",
                  "} else {",
                  "    pm.test(\"Claude not configured (expected)\", function () {",
                  "        var jsonData = pm.response.json();",
                  "        pm.expect(jsonData.message).to.include('not configured');",
                  "    });",
                  "}"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [],
            "url": {
              "raw": "{{baseUrl}}/api/v{{apiVersion}}/Books/{{bookId}}/generate-summary?provider=claude",
              "host": [
                "{{baseUrl}}"
              ],
              "path": [
                "api",
                "v{{apiVersion}}",
                "Books",
                "{{bookId}}",
                "generate-summary"
              ],
              "query": [
                {
                  "key": "provider",
                  "value": "claude"
                }
              ]
            },
            "description": "Test LLM summary generation with Claude (requires API key in appsettings.json)"
          },
          "response": []
        },
        {
          "name": "Test AI Summary - OpenAI",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"Status code is 200 or 503\", function () {",
                  "    pm.expect([200, 503]).to.include(pm.response.code);",
                  "});",
                  "",
                  "if (pm.response.code === 200) {",
                  "    pm.test(\"AI summary generated with OpenAI\", function () {",
                  "        var jsonData = pm.response.json();",
                  "        pm.expect(jsonData).to.have.property('aiGeneratedSummary');",
                  "        pm.expect(jsonData).to.have.property('provider');",
                  "        pm.expect(jsonData.provider).to.eql('openai');",
                  "        pm.expect(jsonData.aiGeneratedSummary).to.not.be.empty;",
                  "    });",
                  "} else {",
                  "    pm.test(\"OpenAI not configured (expected)\", function () {",
                  "        var jsonData = pm.response.json();",
                  "        pm.expect(jsonData.message).to.include('not configured');",
                  "    });",
                  "}"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [],
            "url": {
              "raw": "{{baseUrl}}/api/v{{apiVersion}}/Books/{{bookId}}/generate-summary?provider=openai",
              "host": [
                "{{baseUrl}}"
              ],
              "path": [
                "api",
                "v{{apiVersion}}",
                "Books",
                "{{bookId}}",
                "generate-summary"
              ],
              "query": [
                {
                  "key": "provider",
                  "value": "openai"
                }
              ]
            },
            "description": "Test LLM summary generation with OpenAI GPT (requires API key in appsettings.json)"
          },
          "response": []
        },
        {
          "name": "Test AI Summary - Bedrock",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"Status code is 200 or 503\", function () {",
                  "    pm.expect([200, 503]).to.include(pm.response.code);",
                  "});",
                  "",
                  "if (pm.response.code === 200) {",
                  "    pm.test(\"AI summary generated with Bedrock\", function () {",
                  "        var jsonData = pm.response.json();",
                  "        pm.expect(jsonData).to.have.property('aiGeneratedSummary');",
                  "        pm.expect(jsonData).to.have.property('provider');",
                  "        pm.expect(jsonData.provider).to.eql('bedrock');",
                  "        pm.expect(jsonData.aiGeneratedSummary).to.not.be.empty;",
                  "    });",
                  "} else {",
                  "    pm.test(\"Bedrock not configured (expected)\", function () {",
                  "        var jsonData = pm.response.json();",
                  "        pm.expect(jsonData.message).to.include('not configured');",
                  "    });",
                  "}"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [],
            "url": {
              "raw": "{{baseUrl}}/api/v{{apiVersion}}/Books/{{bookId}}/generate-summary?provider=bedrock",
              "host": [
                "{{baseUrl}}"
              ],
              "path": [
                "api",
                "v{{apiVersion}}",
                "Books",
                "{{bookId}}",
                "generate-summary"
              ],
              "query": [
                {
                  "key": "provider",
                  "value": "bedrock"
                }
              ]
            },
            "description": "Test LLM summary generation with AWS Bedrock (requires AWS credentials)"
          },
          "response": []
        },
        {
          "name": "Test Invalid Provider",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"Status code is 400\", function () {",
                  "    pm.response.to.have.status(400);",
                  "});",
                  "",
                  "pm.test(\"Error message mentions available providers\", function () {",
                  "    var jsonData = pm.response.json();",
                  "    pm.expect(jsonData.message).to.include('Available providers');",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [],
            "url": {
              "raw": "{{baseUrl}}/api/v{{apiVersion}}/Books/{{bookId}}/generate-summary?provider=invalid",
              "host": [
                "{{baseUrl}}"
              ],
              "path": [
                "api",
                "v{{apiVersion}}",
                "Books",
                "{{bookId}}",
                "generate-summary"
              ],
              "query": [
                {
                  "key": "provider",
                  "value": "invalid"
                }
              ]
            },
            "description": "Test error handling for invalid provider name"
          },
          "response": []
        },
        {
          "name": "Verify Ollama Metrics",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"Ollama metrics available\", function () {",
                  "    pm.response.to.have.status(200);",
                  "    var body = pm.response.text();",
                  "    pm.expect(body).to.include('ollama_tokens_');",
                  "});",
                  "",
                  "pm.test(\"Ollama cost is zero\", function () {",
                  "    var body = pm.response.text();",
                  "    if (body.includes('ollama_cost_usd_USD')) {",
                  "        // Extract the cost value and verify it's 0",
                  "        pm.expect(body).to.include('ollama_cost_usd_USD 0');",
                  "    }",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{baseUrl}}/metrics",
              "host": [
                "{{baseUrl}}"
              ],
              "path": [
                "metrics"
              ]
            },
            "description": "Check Prometheus metrics for Ollama token counts and verify $0 cost"
          },
          "response": []
        },
        {
          "name": "Verify Claude Metrics",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"Claude metrics available\", function () {",
                  "    pm.response.to.have.status(200);",
                  "    var body = pm.response.text();",
                  "    pm.expect(body).to.include('claude_tokens_');",
                  "});",
                  "",
                  "pm.test(\"Claude cost tracked\", function () {",
                  "    var body = pm.response.text();",
                  "    pm.expect(body).to.include('claude_cost_usd_USD');",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{baseUrl}}/metrics",
              "host": [
                "{{baseUrl}}"
              ],
              "path": [
                "metrics"
              ]
            },
            "description": "Check Prometheus metrics for Claude token counts and cost tracking"
          },
          "response": []
        }
      ],
      "description": "LLM provider testing and metrics validation"
    },
    {
      "name": "Performance Test Scenarios",
      "item": [
        {
          "name": "Bulk Create Books",
          "event": [
            {
              "listen": "prerequest",
              "script": {
                "exec": [
                  "// This simulates a performance test scenario",
                  "// Creating multiple books in sequence",
                  "",
                  "const genres = ['Fiction', 'Technology', 'Science', 'History', 'Mystery'];",
                  "const genre = genres[Math.floor(Math.random() * genres.length)];",
                  "pm.variables.set(\"testGenre\", genre);",
                  "",
                  "const testNumber = Math.floor(Math.random() * 10000);",
                  "pm.variables.set(\"testNumber\", testNumber);"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"title\": \"Performance Test Book {{testNumber}}\",\n  \"author\": \"Test Author {{testNumber}}\",\n  \"isbn\": \"978-0-{{testNumber}}-00-0\",\n  \"price\": 29.99,\n  \"publishedDate\": \"2024-01-01T00:00:00Z\",\n  \"genre\": \"{{testGenre}}\",\n  \"description\": \"This is a test book created for performance testing scenario {{testNumber}}\",\n  \"stockQuantity\": 100\n}"
            },
            "url": {
              "raw": "{{baseUrl}}/api/v{{apiVersion}}/Books",
              "host": [
                "{{baseUrl}}"
              ],
              "path": [
                "api",
                "v{{apiVersion}}",
                "Books"
              ]
            },
            "description": "Create books in bulk for performance testing"
          },
          "response": []
        },
        {
          "name": "Concurrent Read Test",
          "request": {
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{baseUrl}}/api/v{{apiVersion}}/Books?page=1&pageSize=50",
              "host": [
                "{{baseUrl}}"
              ],
              "path": [
                "api",
                "v{{apiVersion}}",
                "Books"
              ],
              "query": [
                {
                  "key": "page",
                  "value": "1"
                },
                {
                  "key": "pageSize",
                  "value": "50"
                }
              ]
            },
            "description": "Simulate concurrent read operations with larger page sizes"
          },
          "response": []
        },
        {
          "name": "Cache Test - Repeated Reads",
          "request": {
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{baseUrl}}/api/v{{apiVersion}}/Books/{{bookId}}",
              "host": [
                "{{baseUrl}}"
              ],
              "path": [
                "api",
                "v{{apiVersion}}",
                "Books",
                "{{bookId}}"
              ]
            },
            "description": "Test Redis cache performance by repeatedly reading the same book"
          },
          "response": []
        },
        {
          "name": "LLM Performance Test",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"Status code is 200\", function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test(\"LLM response time logged\", function () {",
                  "    console.log('LLM Response Time: ' + pm.response.responseTime + 'ms');",
                  "    pm.expect(pm.response.responseTime).to.be.above(0);",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [],
            "url": {
              "raw": "{{baseUrl}}/api/v{{apiVersion}}/Books/{{bookId}}/generate-summary",
              "host": [
                "{{baseUrl}}"
              ],
              "path": [
                "api",
                "v{{apiVersion}}",
                "Books",
                "{{bookId}}",
                "generate-summary"
              ]
            },
            "description": "Test LLM performance - measure latency and throughput with concurrent requests"
          },
          "response": []
        }
      ],
      "description": "Scenarios designed for performance testing"
    }
  ],
  "event": [
    {
      "listen": "prerequest",
      "script": {
        "type": "text/javascript",
        "exec": [
          "// Global pre-request script",
          "console.log('Executing request to: ' + pm.request.url.toString());",
          "",
          "// Add correlation ID for tracing",
          "pm.request.headers.add({",
          "    key: 'X-Correlation-ID',",
          "    value: pm.variables.replaceIn('{{$guid}}')",
          "});"
        ]
      }
    },
    {
      "listen": "test",
      "script": {
        "type": "text/javascript",
        "exec": [
          "// Global test script",
          "pm.test(\"Response has valid content type\", function () {",
          "    pm.expect(pm.response.headers.get('Content-Type')).to.include('application/json');",
          "});",
          "",
          "// Log response time for performance monitoring",
          "console.log('Response time: ' + pm.response.responseTime + 'ms');"
        ]
      }
    }
  ]
}