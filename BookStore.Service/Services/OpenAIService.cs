using System.Diagnostics;
using System.Diagnostics.Metrics;
using BookStore.Common.Instrumentation;
using OpenAI;
using OpenAI.Chat;

namespace BookStore.Service.Services;

/// <summary>
/// Service for generating book summaries using OpenAI (ChatGPT).
/// </summary>
public class OpenAIService : ILLMService
{
    private readonly ChatClient _client;
    private readonly ILogger<OpenAIService> _logger;
    private readonly ActivitySource _activitySource;
    private readonly Counter<long> _inputTokensCounter;
    private readonly Counter<long> _outputTokensCounter;
    private readonly Counter<long> _totalTokensCounter;
    private readonly Histogram<double> _costHistogram;
    private readonly string _model;

    public string ProviderName => "openai";

    public OpenAIService(
        IConfiguration configuration,
        ILogger<OpenAIService> logger,
        ActivitySource activitySource,
        IMeterFactory meterFactory)
    {
        var apiKey = configuration["LLM:Providers:OpenAI:ApiKey"] ?? configuration["OpenAI:ApiKey"] ?? throw new InvalidOperationException("OpenAI API key not configured");
        _model = configuration["LLM:Providers:OpenAI:Model"] ?? configuration["OpenAI:Model"] ?? "gpt-4o-mini";
        _client = new ChatClient(_model, apiKey);
        _logger = logger;
        _activitySource = activitySource;

        var meter = meterFactory.Create("BookStore.Service.OpenAI");

        _inputTokensCounter = meter.CreateCounter<long>(
            "openai.tokens.input",
            unit: "tokens",
            description: "Number of input tokens consumed by OpenAI API");

        _outputTokensCounter = meter.CreateCounter<long>(
            "openai.tokens.output",
            unit: "tokens",
            description: "Number of output tokens generated by OpenAI API");

        _totalTokensCounter = meter.CreateCounter<long>(
            "openai.tokens.total",
            unit: "tokens",
            description: "Total number of tokens (input + output) used by OpenAI API");

        _costHistogram = meter.CreateHistogram<double>(
            "openai.cost.usd",
            unit: "USD",
            description: "Estimated cost per request in USD");
    }

    public async Task<string> GenerateBookSummaryAsync(
        string title,
        string author,
        string? description,
        CancellationToken cancellationToken = default)
    {
        using var activity = _activitySource.StartActivity("openai.generate_summary", ActivityKind.Client);

        var prompt = BuildPrompt(title, author, description);

        activity?.SetTag(TraceTags.LlmRequestTypeKey, TraceTags.ChatRequestType);
        activity?.SetTag(TraceTags.LlmOperationNameKey, TraceTags.ChatOperation);
        activity?.SetTag(TraceTags.GenAiOperationNameKey, TraceTags.ChatOperation);
        activity?.SetTag(TraceTags.LLMSystem, "openai");
        activity?.SetTag(TraceTags.LlmModelNameKey, _model);
        activity?.SetTag(TraceTags.GenAiRequestMaxTokensKey, 500);
        activity?.SetTag(TraceTags.LlmPrompt0ContentKey, prompt);
        activity?.SetTag(TraceTags.LlmPrompt0RoleKey, "user");

        var startTime = DateTimeOffset.UtcNow;

        try
        {
            var chatCompletion = await _client.CompleteChatAsync(
                [new UserChatMessage(prompt)],
                new ChatCompletionOptions
                {
                    MaxOutputTokenCount = 500,
                    Temperature = 0.7f
                },
                cancellationToken);

            var latency = (DateTimeOffset.UtcNow - startTime).TotalMilliseconds;
            var summary = chatCompletion.Value.Content[0].Text ?? "Unable to generate summary";

            var inputTokens = chatCompletion.Value.Usage.InputTokenCount;
            var outputTokens = chatCompletion.Value.Usage.OutputTokenCount;
            var totalTokens = chatCompletion.Value.Usage.TotalTokenCount;

            // Calculate cost based on GPT-4o-mini pricing
            // Input: $0.150 per million tokens, Output: $0.600 per million tokens
            var inputCost = (inputTokens / 1_000_000.0) * 0.15;
            var outputCost = (outputTokens / 1_000_000.0) * 0.60;
            var totalCost = inputCost + outputCost;

            _inputTokensCounter.Add(inputTokens, new KeyValuePair<string, object?>("model", _model));
            _outputTokensCounter.Add(outputTokens, new KeyValuePair<string, object?>("model", _model));
            _totalTokensCounter.Add(totalTokens, new KeyValuePair<string, object?>("model", _model));
            _costHistogram.Record(totalCost, new KeyValuePair<string, object?>("model", _model));

            activity?.SetTag(TraceTags.GenAiResponseModelKey, _model);
            activity?.SetTag(TraceTags.GenAiResponseIdKey, chatCompletion.Value.Id);
            activity?.SetTag(TraceTags.GenAiUsageInputTokensKey, inputTokens);
            activity?.SetTag(TraceTags.GenAiUsageOutputTokensKey, outputTokens);
            activity?.SetTag(TraceTags.GenAiUsageTotalTokensKey, totalTokens);
            activity?.SetTag(TraceTags.LlmLatencyKey, latency);
            activity?.SetTag(TraceTags.LlmCompletion0ContentKey, summary);
            activity?.SetTag(TraceTags.LlmCompletion0RoleKey, "assistant");
            activity?.SetTag(TraceTags.LlmCompletion0FinishReasonKey, chatCompletion.Value.FinishReason.ToString());
            activity?.SetTag(TraceTags.TraceLoopOutputKey, summary);
            activity?.SetTag("gen_ai.cost.usd", totalCost);
            activity?.SetStatus(ActivityStatusCode.Ok);

            _logger.LogInformation(
                "Generated book summary using OpenAI. Model: {Model}, Input tokens: {InputTokens}, Output tokens: {OutputTokens}, Cost: ${Cost:F6}, Latency: {Latency}ms",
                _model, inputTokens, outputTokens, totalCost, latency);

            return summary;
        }
        catch (Exception ex)
        {
            activity?.SetStatus(ActivityStatusCode.Error, ex.Message);
            activity?.AddTag("exception.type", ex.GetType().FullName);
            activity?.AddTag("exception.message", ex.Message);
            _logger.LogError(ex, "Failed to generate book summary using OpenAI");
            throw;
        }
    }

    private static string BuildPrompt(string title, string author, string? description)
    {
        var prompt = $"Generate a concise, engaging 2-3 sentence summary for a book titled \"{title}\" by {author}.";

        if (!string.IsNullOrEmpty(description))
        {
            prompt += $" Here's some context about the book: {description}";
        }

        prompt += " Focus on what makes this book interesting and worth reading.";

        return prompt;
    }
}
